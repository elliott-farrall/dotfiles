name: Deploy

on:
  push:
    branches: [main]

env:
  USER: runner

jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
      hosts: ${{ steps.hosts.outputs.hosts }}
      users: ${{ steps.users.outputs.users }}
      run: ${{ steps.run.outputs.id }}

    steps:
      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            accept-flake-config = true
            build-users-group =

      - name: Setup Cache
        uses: nix-community/cache-nix-action@v6
        if: ${{ !env.ACT }}
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Hosts
        id: hosts
        run: echo "hosts=$(nix eval --json --apply builtins.attrNames .#deploy.nodes)" >> "$GITHUB_OUTPUT"

      - name: Get Users
        id: users
        run: echo "users=$(nix eval --json --apply builtins.attrNames .#homeConfigurations | jq -c '[.[] | select(. | split("@")[1] | IN(${{ steps.hosts.outputs.hosts }}[]))]')" >> "$GITHUB_OUTPUT"

      - name: Get Run ID
        id: run
        env:
          GH_TOKEN: ${{ github.token}}
        run: echo "id=$(gh api -X GET /repos/${{ github.repository }}/actions/workflows/deploy.yaml/runs --jq '.workflow_runs[1].id')" >> "$GITHUB_OUTPUT"

      - name: Checks...
        uses: int128/wait-for-workflows-action@v1.36.0
        with:
          filter-workflow-names: |
            Check Inputs
            Format
            Prebuild

  deploy:
    runs-on: ubuntu-latest
    environment: ${{ matrix.host }}

    needs: setup
    strategy:
      matrix:
        host: ${{ fromJSON(needs.setup.outputs.hosts) }}

    steps:
      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            accept-flake-config = true
            build-users-group =

      - name: Setup Cache
        uses: nix-community/cache-nix-action@v6
        if: ${{ !env.ACT }}
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - name: Install Tailscale
        uses: Pikachews/tailscale-action@v1 # https://github.com/tailscale/github-action/issues/120
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:deploy

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Add Host
        run: |
          mkdir -p ~/.ssh
          until ssh-keyscan ${{ matrix.host }} >> ~/.ssh/known_hosts; do sleep 5; done

      - name: Build & Deploy
        run: nix run nixpkgs#deploy-rs -- ${ACT:+--dry-activate} --skip-checks --remote-build .#${{ matrix.host }}

  nixos:
    runs-on: ubuntu-latest

    needs: [setup, deploy]
    strategy:
      matrix:
        host: ${{ fromJSON(needs.setup.outputs.hosts) }}

    steps:
      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            accept-flake-config = true
            build-users-group =

      - name: Setup Cache
        uses: nix-community/cache-nix-action@v6
        if: ${{ !env.ACT }}
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - name: Install Tailscale
        uses: Pikachews/tailscale-action@v1 # https://github.com/tailscale/github-action/issues/120
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:deploy

      - name: Add Host
        run: |
          mkdir -p ~/.ssh
          until ssh-keyscan ${{ matrix.host }} >> ~/.ssh/known_hosts; do sleep 5; done

      - name: Get Generation File
        uses: actions/download-artifact@v4
        id: download
        with:
          name: generations-${{ matrix.host }}
          run-id: ${{ needs.setup.outputs.run }}
        continue-on-error: true

      - name: Get Old Generation
        if: steps.download.outcome == 'success'
        id: old
        run: echo "gen=$(jq -r '.new' generations.json)" >> "$GITHUB_OUTPUT"

      - name: Get New Generation
        id: new
        run: echo "gen=$(ssh -v root@${{ matrix.host }} ls /nix/var/nix/profiles | sed 's/.*system-\([0-9]*\)-link/\1/' | sort -n | tail -n 1)" >> "$GITHUB_OUTPUT"

      - name: Create Generations File
        run: jq -n --arg old "${{ steps.old.outputs.gen }}" --arg new "${{ steps.new.outputs.gen }}" '$ARGS.named' > generations.json

      - name: Upload Generations File
        uses: actions/upload-artifact@v4
        with:
          name: generations-${{ matrix.host }}
          path: generations.json

      - name: Create Diff
        if: steps.download.outcome == 'success'
        id: diff
        run: |
          echo "diff=$(ssh root@${{ matrix.host }} nix run nixpkgs#nvd -- diff \
            /nix/var/nix/profiles/system-${{ steps.old.outputs.gen }}-link \
            /nix/var/nix/profiles/system-${{ steps.new.outputs.gen }}-link \
          )" >> "$GITHUB_OUTPUT"

      - name: Create Summary
        if: steps.download.outcome == 'success'
        run: |
          {
            echo "\`\`\`"
            echo "${{ steps.diff.outputs.diff }}"
            echo "\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"

  home:
    runs-on: ubuntu-latest

    needs: [setup, deploy]
    strategy:
      matrix:
        user: ${{ fromJSON(needs.setup.outputs.users) }}

    steps:
      - name: Split User
        id: split
        run: |
          echo "user=$(echo ${{ matrix.user }} | awk -F'@' '{print $1}')" >> "$GITHUB_OUTPUT"
          echo "host=$(echo ${{ matrix.user }} | awk -F'@' '{print $2}')" >> "$GITHUB_OUTPUT"

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            accept-flake-config = true
            build-users-group =

      - name: Setup Cache
        uses: nix-community/cache-nix-action@v6
        if: ${{ !env.ACT }}
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - name: Install Tailscale
        uses: Pikachews/tailscale-action@v1 # https://github.com/tailscale/github-action/issues/120
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:deploy

      - name: Add Host
        run: |
          mkdir -p ~/.ssh
          until ssh-keyscan ${{ steps.split.outputs.host }} >> ~/.ssh/known_hosts; do sleep 5; done

      - name: Get Generation File
        uses: actions/download-artifact@v4
        id: download
        with:
          name: generations-${{ matrix.user }}
          run-id: ${{ needs.setup.outputs.run }}
        continue-on-error: true

      - name: Get Old Generation
        if: steps.download.outcome == 'success'
        id: old
        run: echo "gen=$(jq -r '.new' generations.json)" >> "$GITHUB_OUTPUT"

      - name: Get New Generation
        id: new
        run: echo "gen=$(ssh root@${{ steps.split.outputs.host }} "ls /home/${{ steps.split.outputs.user }}/.local/state/nix/profiles | sed 's/.*home-manager-\([0-9]*\)-link/\1/' | sort -n | tail -n 1")" >> "$GITHUB_OUTPUT"

      - name: Create Generations File
        run: jq -n --arg old "${{ steps.old.outputs.gen }}" --arg new "${{ steps.new.outputs.gen }}" '$ARGS.named' > generations.json

      - name: Upload Generations File
        uses: actions/upload-artifact@v4
        with:
          name: generations-${{ matrix.user }}
          path: generations.json

      - name: Create Diff
        if: steps.download.outcome == 'success'
        id: diff
        run: |
          echo "diff=$(ssh root@${{ steps.split.outputs.host }} nix run nixpkgs#nvd -- diff \
            /home/${{ steps.split.outputs.user }}/.local/state/nix/profiles/home-manager-${{ steps.old.outputs.gen }}-link \
            /home/${{ steps.split.outputs.user }}/.local/state/nix/profiles/home-manager-${{ steps.new.outputs.gen }}-link \
          )" >> "$GITHUB_OUTPUT"

      - name: Create Summary
        if: steps.diff.outcome == 'success'
        run: |
          {
            echo "\`\`\`"
            echo "${{ steps.diff.outputs.diff }}"
            echo "\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"
